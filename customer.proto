syntax="proto3";

package customer;

message ReportRequest {
  string client_id = 1;

  // From date in the 'YYYY-MM-DD' format
  string from_date = 2;

  // To date in the 'YYYY-MM-DD' format
  string to_date = 3;

  // Available output formats: Pretty, JSON, CSV[WithNames], TabSeparated[WithNames[AndTypes]], XML (default "Pretty")
  string format = 4;
}

message ReportResponse {
  string data = 1;
}

message SetConfigRequest {
  Customer customer = 1;
}

message SetConfigResponse {
  string data = 1;
}

message GetConfigRequest {}

message ConfigHistoryItem {
  string id = 1;
  string date = 2;
  string diff = 3;
  string author = 4;
}

service API {
  // Return clients metricks for the specified client ID with breakdown by Campaign ID.
  rpc Report(ReportRequest) returns (ReportResponse) {}
  rpc SetConfig(SetConfigRequest) returns (SetConfigResponse) {}
  rpc GetConfig(GetConfigRequest) returns (Customer) {}
}

message Customer {
  // There should be at least one advertiser in the config.
  map<string, Advertiser> advertisers = 1;
}

message Advertiser {
  string name = 1;

  // There should be at least one campaign for each advertiser.
  map<string, Campaign> campaigns = 2;

  // There should be at least one creative for each advertiser.
  map<string, Creative> creatives = 3;
}

message Campaign {
  // System extention fields. Do not Edit.
  string id = 2;
  string client_id = 3;

  // Required
  message Pricing {
    // This is compared against ortb field "cur" from the bid request,
    // which contains ISO-4217 alpha codes of the currencies, allowed for the bid.
    string currency = 1;

    // This number is sent into the bid response as the bid CPM price.
    // This field is required and should be more then zero.
    double bid = 2;

    // This number divided by 1,000 (CPM) the campaign budget is decreased on the impression.
    // This field is required and should be not less then pricing.bid
    double impression = 3;
  }

  message Budget {
    // Campaign daily budget limit. Daily budget is reseted every day at midnight by the UTC+3 (Moscow) time zone.
    // This field is required and should be more the zero.
    double daily = 1;
  }

  string name = 1;
  repeated string creatives = 4;

  // IAB content categories of the campaign. Refer to List 5.1 in the openRTB spec.
  // This is sent in the bid response as the "cat" field.
  // This is compared with the "bcat" field in the bid request. If matched - the campaign is not bidded.
  repeated string category = 5;
  Pricing pricing = 6;
  Budget budget = 7;

  // Required. If campaign has no targetings, please pass the empty object like {}.
  Targeting targeting = 8;

  // URL of the landing page without get parameters.
  // This is sent to the "adomain" bid response field.
  // The landing page's domain is compared with the "badv" field in the bid request. If matched - the campaign is not bidded.
  repeated string landing_page_url = 9;

  // The URL which will be called on the impression.
  // {RANDOM} macros could be used for cachebusting.
  // Note: if the impression tracker doesn't have the valid SSL certificate - please populate the "creative.insecure" flag to TRUE to avoid the stats discrepancies
  string impression_tracking_url = 10;

  // Campaign start datetime in the YYYY-MM-DDThh:mm:ss±hh:mm format.
  // The date could be ommited (Thh:mm:ss±hh:mm format). In that case campaign is started daily at this time.
  string start_date = 11;

  // Campaign stop datetime in the YYYY-MM-DDThh:mm:ss±hh:mm format.
  // The date could be ommited (Thh:mm:ss±hh:mm format). In that case campaign is stopped daily at this time.
  string stop_date = 12;

  // Please populate this flag to TRUE if you need to pause the campaign without deleting it from the config.
  bool inactive = 13;
}

message Native {
  message Asset {
    message Title {
      string text = 1;
    }

    message Image {
      string url = 1;
      int64 width = 2;
      int64 height = 3;
      string mime = 4;
    }

    message Data {
      string value = 1;
      int64 type = 2;
    }

    Title title = 1;
    Image image = 2;
    Data data = 3;
  }
  repeated Asset assets = 1;
}

enum CreativeType {
  third_party_banner = 0;
  third_party_video = 1;
  native = 2;
  banner = 3; // deprecated
  interstitial = 4;
  video = 5;
}

message Creative {
  reserved 9, 11, 12, 15;

  message Size {
    int64 width = 1;
    int64 height = 2;
  }

  string name = 1;

  // Please ignore this field.
  string id = 2;

  // Please ignore this field.
  string ad_id = 3;

  // Please populate this flag to TRUE in case the creative code has the "http://" requests
  // or impression_tracking_url doesn't have the valid SSL certificate.
  // Please note that some ad networks (google for example) require all the served content to be secured.
  // For those networks you will not receive bids for the creatives with the insecure flag populated.
  bool insecure = 4;

  CreativeType type = 5;

  // URL the user is sent to on click. Should contains the protocol (http:// or https://).
  // This is required for the creatives which should be rotated in the Google Ad Exchange.
  // If you use some ad server you might need to generate the click URL dynamic instead of populate it in the config.
  // For this just put the escaped vertion of the click URL in the "html_content" of the creative right after the click macros.
  // Valid example: {CLICK_URL}http%3A%2F%2Flanding-page.com
  // Invalid example: {CLICK_URL}http://landing-page.com
  string click_url = 6;

  Size size = 7;

  // Creative's html snippet. Should contains valid html code.
  // This field could contains the following macros:
  // {CLICK_URL} will be resolved to the click URL handler.
  // {CLICK_URL_ESC} will be resolved to the escaped click URL handler.
  // {PUB_ID} will be resolved to the publisher id.
  // Note: either {CLICK_URL} or {CLICK_URL_ESC} is required for the creatives which should be rotated in the Google Ad Exchange.
  // This field size should not exceed 8Kb.
  string html_content = 8;

  // Creative's MIME type. This is compared with the "banner.mimes" field in the bid request.
  // If no matches - creative is not eligible for bid.
  repeated string mimes = 10;

  Native native = 13;

  // IAB creative attributes. Refer to List 5.3 in the openRTB spec.
  // This is sent in the bid response in the "bid.attr" field.
  // This is compared with the "battr" field in the bid request. If matched - the creative is not bidded.
  repeated int64 attributes = 14;

  // Please use that variable to populate the custom click marco which will be replaced into the "html_content" field.
  // If you don't populate it, you can still use the default click macro: {CLICK_URL}
  string click_macros = 16;

  // Please use that variable to populate the custom escaped click marco which will be replaced into the "html_content" field.
  // If you don't populate it, you can still use the default click macro: {CLICK_URL_ESC}
  string click_macros_esc = 17;

  message Video {
    // Video ad duration in seconds. Required for the creative type "third_party_video".
    // This is compared with the "video.minduration" and "video.maxduration" fields in the bid request.
    // Creative's duration should be between these values to be eligible for bid.
    int64 duration = 1;

    // Supported video protocols. Required for the creative type "video". Refer to List 5.8 in the Open RTB spec.
    // This is compared with the "video.protocols" field in the bid request.
    // If no matches - creative is not eligible for bid.
    repeated int64 protocols = 2;

    // The URL which returns the valid VAST XML.
    // Required for the creative type "third_party_video".
    string vast_url = 3;

    // Number of seconds before the SKIP button is appeared in the video ad.
    // Mandatory for the skippable video creatives.
    int64 skipoffset = 4;

    message File {
      string mime = 1;
      string url = 2;
    }

    repeated File files = 5;
  }

  Video video = 18;
}

message Targeting {
  // Required for campaigns, which should be served in the Google Ad Exchange
  message Google {
    string billing_id = 1;
  }

  message Geo {
    // Country code using ISO-3166-1-alpha-3.
    // Works by the "device.geo.country" field in the bid request.
    ListMatch country = 1;

    // City using United Nations Code for Trade & Transport Locations: : http://www.unece.org/cefact/locode/service/location.html
    // Works by the "device.geo.city" field in the bid request.
    ListMatch city = 2;

    // Region code using ISO-3166-2; 2-letter state code if USA.
    // Works by the "device.geo.region" field in the bid request.
    ListMatch region = 3;
  }

  message OS {
    // Device operating system as it's declared in the "device.os" field in the bid request.
    string name = 1;

    // Device operating system version as it's declared in the "device.osv" field in the bid request.
    string version = 2;
  }

  message UserAgent {
    // Available browser names: "Opera", "Edge", "Chrome", "Safari", "Internet Explorer"
    string name = 1;

    // If the flag is set to TRUE, the only mobile versions of the browser's user agent are passed.
    bool mobile = 2;
  }

  message ListMatch {
    bool include = 1;
    repeated string list = 2;
  }

  Geo geo = 1;
  repeated OS os = 2;

  // The minimum delay between any two impressions for the single user in the one ad network in seconds.
  // Works by "user.id" field in the bid request. If "user.id" is null - works by the "device.ifa" field instead.
  int64 frequency = 3;
  UserAgent user_agent = 4;

  // Carrier or ISP as it's declared in the "device.carrier" field in the bid request.
  // For Google Ad Exchange use the Criterion ID string from this list to target: https://developers.google.com/adwords/api/docs/appendix/mobilecarriers.csv
  ListMatch carrier = 5;

  // IAB content categories as it's declared in the "site.cat" or "app.cat" fields in the bid request.
  ListMatch cat = 6;

  // The general type of device as it's declared in the "device.devicetype" field in the bid request.
  // Refer to List 5.17 in the Open RTB spec.
  ListMatch device_type = 7;

  // Site's domain is extracted from the "site.page" field in the bid request and compared with the populated list.
  ListMatch domain = 8;

  // Works by the "publisher.id" field in the bid request.
  ListMatch publisher = 9;

  // Works by the "ext.ssp" field for the Bidswitch's request.
  // Works by the "ext.exchange" field for the SmartRTB's request.
  ListMatch ssp = 10;

  Google google = 11;

  // Connected ad networks targeting. Please ask your account manager to obtain the available networks list.
  ListMatch network = 12;

  // Works by the "device.ip" field in the bid request.
  ListMatch ip = 13;

  // Please use the "255.255.255.255/n" format for the ip ranges where "n" is the number of the first bits in the subnet mask.
  // For example "20.78.168.0/21" represents IPv4 addresses between "220.78.168.0" and "220.78.175.255"
  repeated string range_ip = 14;

  // This targeting search the substring into the "site.page" field of the bid request.
  // For example if you target to include the "news.ru/sport" string,
  // the site.page "http://www.news.ru/sports-and-hobbies/article.html" will pass
  // and the "http://www.news.ru/team-sport" will not.
  ListMatch url_contains = 15;

  // Works by the "site.id" field in the bid request.
  ListMatch site_id = 16;

  // Works by the "app.id" field in the bid request.
  ListMatch app_id = 17;

  ListMatch app_bundle = 18;

  ListMatch device_connection_type = 19;
}

enum Network {
  bidswitch = 0;
  google = 1;
  mirs = 2;
  advmaker = 3;
  smartrtb = 4;
  otm = 5;
}
