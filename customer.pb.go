// Code generated by protoc-gen-go.
// source: customer/customer.proto
// DO NOT EDIT!

/*
Package customer is a generated protocol buffer package.

It is generated from these files:
	customer/customer.proto

It has these top-level messages:
	ReportRequest
	ReportResponse
	SetConfigRequest
	SetConfigResponse
	GetConfigRequest
	ConfigHistoryItem
	Customer
	Advertiser
	Campaign
	Native
	Creative
	Targeting
*/
package customer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CreativeType int32

const (
	CreativeType_third_party_banner CreativeType = 0
	CreativeType_video              CreativeType = 1
	CreativeType_native             CreativeType = 2
	CreativeType_banner             CreativeType = 3
)

var CreativeType_name = map[int32]string{
	0: "third_party_banner",
	1: "video",
	2: "native",
	3: "banner",
}
var CreativeType_value = map[string]int32{
	"third_party_banner": 0,
	"video":              1,
	"native":             2,
	"banner":             3,
}

func (x CreativeType) String() string {
	return proto.EnumName(CreativeType_name, int32(x))
}
func (CreativeType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Network int32

const (
	Network_bidswitch Network = 0
	Network_google    Network = 1
	Network_mirs      Network = 2
	Network_advmaker  Network = 3
	Network_smartrtb  Network = 4
)

var Network_name = map[int32]string{
	0: "bidswitch",
	1: "google",
	2: "mirs",
	3: "advmaker",
	4: "smartrtb",
}
var Network_value = map[string]int32{
	"bidswitch": 0,
	"google":    1,
	"mirs":      2,
	"advmaker":  3,
	"smartrtb":  4,
}

func (x Network) String() string {
	return proto.EnumName(Network_name, int32(x))
}
func (Network) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type ReportRequest struct {
	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
	// From date in the 'YYYY-MM-DD' format
	FromDate string `protobuf:"bytes,2,opt,name=from_date,json=fromDate" json:"from_date,omitempty"`
	// To date in the 'YYYY-MM-DD' format
	ToDate string `protobuf:"bytes,3,opt,name=to_date,json=toDate" json:"to_date,omitempty"`
	// Available output formats: Pretty, JSON, CSV[WithNames], TabSeparated[WithNames[AndTypes]], XML (default "Pretty")
	Format string `protobuf:"bytes,4,opt,name=format" json:"format,omitempty"`
}

func (m *ReportRequest) Reset()                    { *m = ReportRequest{} }
func (m *ReportRequest) String() string            { return proto.CompactTextString(m) }
func (*ReportRequest) ProtoMessage()               {}
func (*ReportRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ReportRequest) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *ReportRequest) GetFromDate() string {
	if m != nil {
		return m.FromDate
	}
	return ""
}

func (m *ReportRequest) GetToDate() string {
	if m != nil {
		return m.ToDate
	}
	return ""
}

func (m *ReportRequest) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

type ReportResponse struct {
	Data string `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (m *ReportResponse) Reset()                    { *m = ReportResponse{} }
func (m *ReportResponse) String() string            { return proto.CompactTextString(m) }
func (*ReportResponse) ProtoMessage()               {}
func (*ReportResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ReportResponse) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type SetConfigRequest struct {
	Client *Customer `protobuf:"bytes,1,opt,name=client" json:"client,omitempty"`
}

func (m *SetConfigRequest) Reset()                    { *m = SetConfigRequest{} }
func (m *SetConfigRequest) String() string            { return proto.CompactTextString(m) }
func (*SetConfigRequest) ProtoMessage()               {}
func (*SetConfigRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SetConfigRequest) GetClient() *Customer {
	if m != nil {
		return m.Client
	}
	return nil
}

type SetConfigResponse struct {
	Data string `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (m *SetConfigResponse) Reset()                    { *m = SetConfigResponse{} }
func (m *SetConfigResponse) String() string            { return proto.CompactTextString(m) }
func (*SetConfigResponse) ProtoMessage()               {}
func (*SetConfigResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SetConfigResponse) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type GetConfigRequest struct {
}

func (m *GetConfigRequest) Reset()                    { *m = GetConfigRequest{} }
func (m *GetConfigRequest) String() string            { return proto.CompactTextString(m) }
func (*GetConfigRequest) ProtoMessage()               {}
func (*GetConfigRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type ConfigHistoryItem struct {
	Id     string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Date   string `protobuf:"bytes,2,opt,name=date" json:"date,omitempty"`
	Diff   string `protobuf:"bytes,3,opt,name=diff" json:"diff,omitempty"`
	Author string `protobuf:"bytes,4,opt,name=author" json:"author,omitempty"`
}

func (m *ConfigHistoryItem) Reset()                    { *m = ConfigHistoryItem{} }
func (m *ConfigHistoryItem) String() string            { return proto.CompactTextString(m) }
func (*ConfigHistoryItem) ProtoMessage()               {}
func (*ConfigHistoryItem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ConfigHistoryItem) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ConfigHistoryItem) GetDate() string {
	if m != nil {
		return m.Date
	}
	return ""
}

func (m *ConfigHistoryItem) GetDiff() string {
	if m != nil {
		return m.Diff
	}
	return ""
}

func (m *ConfigHistoryItem) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

type Customer struct {
	// There should be at least one advertiser in the config.
	Advertisers map[string]*Advertiser `protobuf:"bytes,1,rep,name=advertisers" json:"advertisers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Customer) Reset()                    { *m = Customer{} }
func (m *Customer) String() string            { return proto.CompactTextString(m) }
func (*Customer) ProtoMessage()               {}
func (*Customer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Customer) GetAdvertisers() map[string]*Advertiser {
	if m != nil {
		return m.Advertisers
	}
	return nil
}

type Advertiser struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// There should be at least one campaign for each advertiser.
	Campaigns map[string]*Campaign `protobuf:"bytes,2,rep,name=campaigns" json:"campaigns,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// There should be at least one creative for each advertiser.
	Creatives map[string]*Creative `protobuf:"bytes,3,rep,name=creatives" json:"creatives,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Advertiser) Reset()                    { *m = Advertiser{} }
func (m *Advertiser) String() string            { return proto.CompactTextString(m) }
func (*Advertiser) ProtoMessage()               {}
func (*Advertiser) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Advertiser) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Advertiser) GetCampaigns() map[string]*Campaign {
	if m != nil {
		return m.Campaigns
	}
	return nil
}

func (m *Advertiser) GetCreatives() map[string]*Creative {
	if m != nil {
		return m.Creatives
	}
	return nil
}

type Campaign struct {
	// System extention fields. Do not Edit.
	Id        string   `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	ClientId  string   `protobuf:"bytes,3,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
	Name      string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Creatives []string `protobuf:"bytes,4,rep,name=creatives" json:"creatives,omitempty"`
	// IAB content categories of the campaign. Refer to List 5.1 in the openRTB spec.
	// This is sent in the bid response as the "cat" field.
	// This is compared with the "bcat" field in the bid request. If matched - the campaign is not bidded.
	Category []string          `protobuf:"bytes,5,rep,name=category" json:"category,omitempty"`
	Pricing  *Campaign_Pricing `protobuf:"bytes,6,opt,name=pricing" json:"pricing,omitempty"`
	Budget   *Campaign_Budget  `protobuf:"bytes,7,opt,name=budget" json:"budget,omitempty"`
	// Required. If campaign has no targetings, please pass the empty object like {}.
	Targeting *Targeting `protobuf:"bytes,8,opt,name=targeting" json:"targeting,omitempty"`
	// URL of the landing page without get parameters.
	// This is sent to the "adomain" bid response field.
	// The landing page's domain is compared with the "badv" field in the bid request. If matched - the campaign is not bidded.
	LandingPageUrl []string `protobuf:"bytes,9,rep,name=landing_page_url,json=landingPageUrl" json:"landing_page_url,omitempty"`
	// The URL without the protocol prefix (http:// or https://) which will be called on the impression.
	// {RANDOM} macro could be used for cachebusting.
	// Incorrect Ex: http://www.tracker.com/?...
	// Correct Ex: wwww.tracker.com/?...
	// "http://" or "https://" will be added automatically based on the "imp.secure" flag into the bid request.
	// Note: if the impression tracker doesn't have the valid SSL certificate - please populate the "creative.insecure" flag to TRUE to avoid the stats discrepancies
	ImpressionTrackingUrl string `protobuf:"bytes,10,opt,name=impression_tracking_url,json=impressionTrackingUrl" json:"impression_tracking_url,omitempty"`
	// Campaign start datetime in the YYYY-MM-DDThh:mm:ss±hh:mm format.
	// The date could be ommited (Thh:mm:ss±hh:mm format). In that case campaign is started daily at this time.
	StartDate string `protobuf:"bytes,11,opt,name=start_date,json=startDate" json:"start_date,omitempty"`
	// Campaign stop datetime in the YYYY-MM-DDThh:mm:ss±hh:mm format.
	// The date could be ommited (Thh:mm:ss±hh:mm format). In that case campaign is stopped daily at this time.
	StopDate string `protobuf:"bytes,12,opt,name=stop_date,json=stopDate" json:"stop_date,omitempty"`
	Inactive bool   `protobuf:"varint,13,opt,name=inactive" json:"inactive,omitempty"`
}

func (m *Campaign) Reset()                    { *m = Campaign{} }
func (m *Campaign) String() string            { return proto.CompactTextString(m) }
func (*Campaign) ProtoMessage()               {}
func (*Campaign) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Campaign) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Campaign) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *Campaign) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Campaign) GetCreatives() []string {
	if m != nil {
		return m.Creatives
	}
	return nil
}

func (m *Campaign) GetCategory() []string {
	if m != nil {
		return m.Category
	}
	return nil
}

func (m *Campaign) GetPricing() *Campaign_Pricing {
	if m != nil {
		return m.Pricing
	}
	return nil
}

func (m *Campaign) GetBudget() *Campaign_Budget {
	if m != nil {
		return m.Budget
	}
	return nil
}

func (m *Campaign) GetTargeting() *Targeting {
	if m != nil {
		return m.Targeting
	}
	return nil
}

func (m *Campaign) GetLandingPageUrl() []string {
	if m != nil {
		return m.LandingPageUrl
	}
	return nil
}

func (m *Campaign) GetImpressionTrackingUrl() string {
	if m != nil {
		return m.ImpressionTrackingUrl
	}
	return ""
}

func (m *Campaign) GetStartDate() string {
	if m != nil {
		return m.StartDate
	}
	return ""
}

func (m *Campaign) GetStopDate() string {
	if m != nil {
		return m.StopDate
	}
	return ""
}

func (m *Campaign) GetInactive() bool {
	if m != nil {
		return m.Inactive
	}
	return false
}

// Required
type Campaign_Pricing struct {
	// This is compared against ortb field "cur" from the bid request,
	// which contains ISO-4217 alpha codes of the currencies, allowed for the bid.
	Currency string `protobuf:"bytes,1,opt,name=currency" json:"currency,omitempty"`
	// This number is sent into the bid response as the bid CPM price.
	Bid float64 `protobuf:"fixed64,2,opt,name=bid" json:"bid,omitempty"`
	// This number divided by 1,000 (CPM) the campaign budget is decreased on the impression.
	Impression float64 `protobuf:"fixed64,3,opt,name=impression" json:"impression,omitempty"`
}

func (m *Campaign_Pricing) Reset()                    { *m = Campaign_Pricing{} }
func (m *Campaign_Pricing) String() string            { return proto.CompactTextString(m) }
func (*Campaign_Pricing) ProtoMessage()               {}
func (*Campaign_Pricing) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8, 0} }

func (m *Campaign_Pricing) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *Campaign_Pricing) GetBid() float64 {
	if m != nil {
		return m.Bid
	}
	return 0
}

func (m *Campaign_Pricing) GetImpression() float64 {
	if m != nil {
		return m.Impression
	}
	return 0
}

type Campaign_Budget struct {
	// Campaign daily budget limit. Daily budget is reseted every day at midnight by the UTC+3 (Moscow) time zone.
	// Please be carefull: if you set zero daily budget - that means no limit, so the campaign will spend money unstoppable.
	Daily float64 `protobuf:"fixed64,1,opt,name=daily" json:"daily,omitempty"`
}

func (m *Campaign_Budget) Reset()                    { *m = Campaign_Budget{} }
func (m *Campaign_Budget) String() string            { return proto.CompactTextString(m) }
func (*Campaign_Budget) ProtoMessage()               {}
func (*Campaign_Budget) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8, 1} }

func (m *Campaign_Budget) GetDaily() float64 {
	if m != nil {
		return m.Daily
	}
	return 0
}

type Native struct {
	Assets []*Native_Asset `protobuf:"bytes,1,rep,name=assets" json:"assets,omitempty"`
}

func (m *Native) Reset()                    { *m = Native{} }
func (m *Native) String() string            { return proto.CompactTextString(m) }
func (*Native) ProtoMessage()               {}
func (*Native) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Native) GetAssets() []*Native_Asset {
	if m != nil {
		return m.Assets
	}
	return nil
}

type Native_Asset struct {
	Title *Native_Asset_Title `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	Image *Native_Asset_Image `protobuf:"bytes,2,opt,name=image" json:"image,omitempty"`
}

func (m *Native_Asset) Reset()                    { *m = Native_Asset{} }
func (m *Native_Asset) String() string            { return proto.CompactTextString(m) }
func (*Native_Asset) ProtoMessage()               {}
func (*Native_Asset) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9, 0} }

func (m *Native_Asset) GetTitle() *Native_Asset_Title {
	if m != nil {
		return m.Title
	}
	return nil
}

func (m *Native_Asset) GetImage() *Native_Asset_Image {
	if m != nil {
		return m.Image
	}
	return nil
}

type Native_Asset_Title struct {
	Text string `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
}

func (m *Native_Asset_Title) Reset()                    { *m = Native_Asset_Title{} }
func (m *Native_Asset_Title) String() string            { return proto.CompactTextString(m) }
func (*Native_Asset_Title) ProtoMessage()               {}
func (*Native_Asset_Title) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9, 0, 0} }

func (m *Native_Asset_Title) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type Native_Asset_Image struct {
	Url    string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	Width  int64  `protobuf:"varint,2,opt,name=width" json:"width,omitempty"`
	Height int64  `protobuf:"varint,3,opt,name=height" json:"height,omitempty"`
	Mime   string `protobuf:"bytes,4,opt,name=mime" json:"mime,omitempty"`
}

func (m *Native_Asset_Image) Reset()                    { *m = Native_Asset_Image{} }
func (m *Native_Asset_Image) String() string            { return proto.CompactTextString(m) }
func (*Native_Asset_Image) ProtoMessage()               {}
func (*Native_Asset_Image) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9, 0, 1} }

func (m *Native_Asset_Image) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Native_Asset_Image) GetWidth() int64 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *Native_Asset_Image) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Native_Asset_Image) GetMime() string {
	if m != nil {
		return m.Mime
	}
	return ""
}

type Creative struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Please ignore this field.
	Id string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	// Please ignore this field.
	AdId string `protobuf:"bytes,3,opt,name=ad_id,json=adId" json:"ad_id,omitempty"`
	// Please populate this flag to TRUE in case the creative code has the "http://" requests
	// or impression_tracking_url doesn't have the valid SSL certificate.
	// Please note that some ad networks (google for example) require all the served content to be secured.
	// For those networks you will not receive bids for the creatives with the insecure flag populated.
	Insecure bool `protobuf:"varint,4,opt,name=insecure" json:"insecure,omitempty"`
	// Available creative types:
	// 0 or blank - "third_party_banner";
	// 1 -"video";
	// 2 - "native".
	Type CreativeType `protobuf:"varint,5,opt,name=type,enum=customer.CreativeType" json:"type,omitempty"`
	// URL the user is sent to on click. Should contains the protocol (http:// or https://).
	// This is required for the creatives which should be rotated in the Google Ad Exchange.
	ClickUrl string         `protobuf:"bytes,6,opt,name=click_url,json=clickUrl" json:"click_url,omitempty"`
	Size     *Creative_Size `protobuf:"bytes,7,opt,name=size" json:"size,omitempty"`
	// Creative's html snippet. Should contains valid html code.
	// This field could contains the following macros:
	// {CLICK_URL} will be resolved to the click URL handler.
	// {CLICK_URL_ESC} will be resolved to the escaped click URL handler.
	// {PUB_ID} will be resolved to the publisher id.
	// Note: either {CLICK_URL} or {CLICK_URL_ESC} is required for the creatives which should be rotated in the Google Ad Exchange.
	HtmlContent string `protobuf:"bytes,8,opt,name=html_content,json=htmlContent" json:"html_content,omitempty"`
	// Video ad duration in seconds. Required for the creative type "video".
	// This is compared with the "video.minduration" and "video.maxduration" fields in the bid request.
	// Creative's duration should be between these values to be eligible for bid.
	Duration int64 `protobuf:"varint,9,opt,name=duration" json:"duration,omitempty"`
	// Creative's MIME type. This is compared with the "banner.mimes" field in the bid request.
	// If no matches - creative is not eligible for bid.
	Mimes []string `protobuf:"bytes,10,rep,name=mimes" json:"mimes,omitempty"`
	// Supported video protocols. Required for the creative type "video". Refer to List 5.8 in the Open RTB spec.
	// This is compared with the "video.protocols" field in the bid request.
	// If no matches - creative is not eligible for bid.
	Protocols []int64 `protobuf:"varint,11,rep,packed,name=protocols" json:"protocols,omitempty"`
	// The URL which returns the valid VAST XML.
	// Required for the creative type "video".
	VastUrl    string  `protobuf:"bytes,12,opt,name=vast_url,json=vastUrl" json:"vast_url,omitempty"`
	Native     *Native `protobuf:"bytes,13,opt,name=native" json:"native,omitempty"`
	Attributes []int64 `protobuf:"varint,14,rep,packed,name=attributes" json:"attributes,omitempty"`
}

func (m *Creative) Reset()                    { *m = Creative{} }
func (m *Creative) String() string            { return proto.CompactTextString(m) }
func (*Creative) ProtoMessage()               {}
func (*Creative) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *Creative) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Creative) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Creative) GetAdId() string {
	if m != nil {
		return m.AdId
	}
	return ""
}

func (m *Creative) GetInsecure() bool {
	if m != nil {
		return m.Insecure
	}
	return false
}

func (m *Creative) GetType() CreativeType {
	if m != nil {
		return m.Type
	}
	return CreativeType_third_party_banner
}

func (m *Creative) GetClickUrl() string {
	if m != nil {
		return m.ClickUrl
	}
	return ""
}

func (m *Creative) GetSize() *Creative_Size {
	if m != nil {
		return m.Size
	}
	return nil
}

func (m *Creative) GetHtmlContent() string {
	if m != nil {
		return m.HtmlContent
	}
	return ""
}

func (m *Creative) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *Creative) GetMimes() []string {
	if m != nil {
		return m.Mimes
	}
	return nil
}

func (m *Creative) GetProtocols() []int64 {
	if m != nil {
		return m.Protocols
	}
	return nil
}

func (m *Creative) GetVastUrl() string {
	if m != nil {
		return m.VastUrl
	}
	return ""
}

func (m *Creative) GetNative() *Native {
	if m != nil {
		return m.Native
	}
	return nil
}

func (m *Creative) GetAttributes() []int64 {
	if m != nil {
		return m.Attributes
	}
	return nil
}

type Creative_Size struct {
	Width  int64 `protobuf:"varint,1,opt,name=width" json:"width,omitempty"`
	Height int64 `protobuf:"varint,2,opt,name=height" json:"height,omitempty"`
}

func (m *Creative_Size) Reset()                    { *m = Creative_Size{} }
func (m *Creative_Size) String() string            { return proto.CompactTextString(m) }
func (*Creative_Size) ProtoMessage()               {}
func (*Creative_Size) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10, 0} }

func (m *Creative_Size) GetWidth() int64 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *Creative_Size) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type Targeting struct {
	Geo *Targeting_Geo  `protobuf:"bytes,1,opt,name=geo" json:"geo,omitempty"`
	Os  []*Targeting_OS `protobuf:"bytes,2,rep,name=os" json:"os,omitempty"`
	// The minimum delay between any two impressions for the single user in the one ad network in seconds.
	// Works by "user.id" field in the bid request.
	Frequency int64                `protobuf:"varint,3,opt,name=frequency" json:"frequency,omitempty"`
	UserAgent *Targeting_UserAgent `protobuf:"bytes,4,opt,name=user_agent,json=userAgent" json:"user_agent,omitempty"`
	// Carrier or ISP as it's declared in the "device.carrier" field in the bid request.
	Carrier *Targeting_ListMatch `protobuf:"bytes,5,opt,name=carrier" json:"carrier,omitempty"`
	// IAB content categories as it's declared in the "site.cat" or "app.cat" fields in the bid request.
	Cat *Targeting_ListMatch `protobuf:"bytes,6,opt,name=cat" json:"cat,omitempty"`
	// The general type of device as it's declared in the "device.devicetype" field in the bid request.
	// Refer to List 5.17 in the Open RTB spec.
	DeviceType *Targeting_ListMatch `protobuf:"bytes,7,opt,name=device_type,json=deviceType" json:"device_type,omitempty"`
	// Site's domain is extracted from the "site.page" field in the bid request and compared with the populated list.
	Domain *Targeting_ListMatch `protobuf:"bytes,8,opt,name=domain" json:"domain,omitempty"`
	// Works by the "publisher.id" field in the bid request.
	Publisher *Targeting_ListMatch `protobuf:"bytes,9,opt,name=publisher" json:"publisher,omitempty"`
	// Works by the "ext.ssp" field in the bid request.
	Ssp    *Targeting_ListMatch `protobuf:"bytes,10,opt,name=ssp" json:"ssp,omitempty"`
	Google *Targeting_Google    `protobuf:"bytes,11,opt,name=google" json:"google,omitempty"`
	// Connected ad networks targeting. Please ask your account manager to obtain the available networks list.
	Network *Targeting_ListMatch `protobuf:"bytes,12,opt,name=network" json:"network,omitempty"`
	// Works by the "device.ip" field in the bid request.
	Ip *Targeting_ListMatch `protobuf:"bytes,13,opt,name=ip" json:"ip,omitempty"`
	// Please use the "255.255.255.255/n" format for the ip ranges where "n" is the number of the first bits in the subnet mask.
	// For example "20.78.168.0/21" represents IPv4 addresses between "220.78.168.0" and "220.78.175.255"
	RangeIp []string `protobuf:"bytes,14,rep,name=range_ip,json=rangeIp" json:"range_ip,omitempty"`
}

func (m *Targeting) Reset()                    { *m = Targeting{} }
func (m *Targeting) String() string            { return proto.CompactTextString(m) }
func (*Targeting) ProtoMessage()               {}
func (*Targeting) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *Targeting) GetGeo() *Targeting_Geo {
	if m != nil {
		return m.Geo
	}
	return nil
}

func (m *Targeting) GetOs() []*Targeting_OS {
	if m != nil {
		return m.Os
	}
	return nil
}

func (m *Targeting) GetFrequency() int64 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

func (m *Targeting) GetUserAgent() *Targeting_UserAgent {
	if m != nil {
		return m.UserAgent
	}
	return nil
}

func (m *Targeting) GetCarrier() *Targeting_ListMatch {
	if m != nil {
		return m.Carrier
	}
	return nil
}

func (m *Targeting) GetCat() *Targeting_ListMatch {
	if m != nil {
		return m.Cat
	}
	return nil
}

func (m *Targeting) GetDeviceType() *Targeting_ListMatch {
	if m != nil {
		return m.DeviceType
	}
	return nil
}

func (m *Targeting) GetDomain() *Targeting_ListMatch {
	if m != nil {
		return m.Domain
	}
	return nil
}

func (m *Targeting) GetPublisher() *Targeting_ListMatch {
	if m != nil {
		return m.Publisher
	}
	return nil
}

func (m *Targeting) GetSsp() *Targeting_ListMatch {
	if m != nil {
		return m.Ssp
	}
	return nil
}

func (m *Targeting) GetGoogle() *Targeting_Google {
	if m != nil {
		return m.Google
	}
	return nil
}

func (m *Targeting) GetNetwork() *Targeting_ListMatch {
	if m != nil {
		return m.Network
	}
	return nil
}

func (m *Targeting) GetIp() *Targeting_ListMatch {
	if m != nil {
		return m.Ip
	}
	return nil
}

func (m *Targeting) GetRangeIp() []string {
	if m != nil {
		return m.RangeIp
	}
	return nil
}

// Required for campaigns, which should be served in the Google Ad Exchange
type Targeting_Google struct {
	BillingId string `protobuf:"bytes,1,opt,name=billing_id,json=billingId" json:"billing_id,omitempty"`
}

func (m *Targeting_Google) Reset()                    { *m = Targeting_Google{} }
func (m *Targeting_Google) String() string            { return proto.CompactTextString(m) }
func (*Targeting_Google) ProtoMessage()               {}
func (*Targeting_Google) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11, 0} }

func (m *Targeting_Google) GetBillingId() string {
	if m != nil {
		return m.BillingId
	}
	return ""
}

type Targeting_Geo struct {
	// Country code using ISO-3166-1-alpha-3.
	// Works by the "device.geo.country" field in the bid request.
	Country *Targeting_ListMatch `protobuf:"bytes,1,opt,name=country" json:"country,omitempty"`
	// City using United Nations Code for Trade & Transport Locations.
	// Works by the "device.geo.city" field in the bid request.
	City *Targeting_ListMatch `protobuf:"bytes,2,opt,name=city" json:"city,omitempty"`
}

func (m *Targeting_Geo) Reset()                    { *m = Targeting_Geo{} }
func (m *Targeting_Geo) String() string            { return proto.CompactTextString(m) }
func (*Targeting_Geo) ProtoMessage()               {}
func (*Targeting_Geo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11, 1} }

func (m *Targeting_Geo) GetCountry() *Targeting_ListMatch {
	if m != nil {
		return m.Country
	}
	return nil
}

func (m *Targeting_Geo) GetCity() *Targeting_ListMatch {
	if m != nil {
		return m.City
	}
	return nil
}

type Targeting_OS struct {
	// Device operating system as it's declared in the "device.os" field in the bid request.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Device operating system version as it's declared in the "device.osv" field in the bid request.
	Version string `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
}

func (m *Targeting_OS) Reset()                    { *m = Targeting_OS{} }
func (m *Targeting_OS) String() string            { return proto.CompactTextString(m) }
func (*Targeting_OS) ProtoMessage()               {}
func (*Targeting_OS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11, 2} }

func (m *Targeting_OS) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Targeting_OS) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type Targeting_UserAgent struct {
	// Available browser names: "Opera", "Edge", "Chrome", "Safari", "Internet Explorer"
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// If the flag is set to TRUE, the only mobile versions of the browser's user agent are passed.
	Mobile bool `protobuf:"varint,2,opt,name=mobile" json:"mobile,omitempty"`
}

func (m *Targeting_UserAgent) Reset()                    { *m = Targeting_UserAgent{} }
func (m *Targeting_UserAgent) String() string            { return proto.CompactTextString(m) }
func (*Targeting_UserAgent) ProtoMessage()               {}
func (*Targeting_UserAgent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11, 3} }

func (m *Targeting_UserAgent) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Targeting_UserAgent) GetMobile() bool {
	if m != nil {
		return m.Mobile
	}
	return false
}

type Targeting_ListMatch struct {
	Include bool     `protobuf:"varint,1,opt,name=include" json:"include,omitempty"`
	List    []string `protobuf:"bytes,2,rep,name=list" json:"list,omitempty"`
}

func (m *Targeting_ListMatch) Reset()                    { *m = Targeting_ListMatch{} }
func (m *Targeting_ListMatch) String() string            { return proto.CompactTextString(m) }
func (*Targeting_ListMatch) ProtoMessage()               {}
func (*Targeting_ListMatch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11, 4} }

func (m *Targeting_ListMatch) GetInclude() bool {
	if m != nil {
		return m.Include
	}
	return false
}

func (m *Targeting_ListMatch) GetList() []string {
	if m != nil {
		return m.List
	}
	return nil
}

func init() {
	proto.RegisterType((*ReportRequest)(nil), "customer.ReportRequest")
	proto.RegisterType((*ReportResponse)(nil), "customer.ReportResponse")
	proto.RegisterType((*SetConfigRequest)(nil), "customer.SetConfigRequest")
	proto.RegisterType((*SetConfigResponse)(nil), "customer.SetConfigResponse")
	proto.RegisterType((*GetConfigRequest)(nil), "customer.GetConfigRequest")
	proto.RegisterType((*ConfigHistoryItem)(nil), "customer.ConfigHistoryItem")
	proto.RegisterType((*Customer)(nil), "customer.Customer")
	proto.RegisterType((*Advertiser)(nil), "customer.Advertiser")
	proto.RegisterType((*Campaign)(nil), "customer.Campaign")
	proto.RegisterType((*Campaign_Pricing)(nil), "customer.Campaign.Pricing")
	proto.RegisterType((*Campaign_Budget)(nil), "customer.Campaign.Budget")
	proto.RegisterType((*Native)(nil), "customer.Native")
	proto.RegisterType((*Native_Asset)(nil), "customer.Native.Asset")
	proto.RegisterType((*Native_Asset_Title)(nil), "customer.Native.Asset.Title")
	proto.RegisterType((*Native_Asset_Image)(nil), "customer.Native.Asset.Image")
	proto.RegisterType((*Creative)(nil), "customer.Creative")
	proto.RegisterType((*Creative_Size)(nil), "customer.Creative.Size")
	proto.RegisterType((*Targeting)(nil), "customer.Targeting")
	proto.RegisterType((*Targeting_Google)(nil), "customer.Targeting.Google")
	proto.RegisterType((*Targeting_Geo)(nil), "customer.Targeting.Geo")
	proto.RegisterType((*Targeting_OS)(nil), "customer.Targeting.OS")
	proto.RegisterType((*Targeting_UserAgent)(nil), "customer.Targeting.UserAgent")
	proto.RegisterType((*Targeting_ListMatch)(nil), "customer.Targeting.ListMatch")
	proto.RegisterEnum("customer.CreativeType", CreativeType_name, CreativeType_value)
	proto.RegisterEnum("customer.Network", Network_name, Network_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for API service

type APIClient interface {
	// Return clients metricks for the specified client ID with breakdown by Campaign ID.
	Report(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*ReportResponse, error)
	SetConfig(ctx context.Context, in *SetConfigRequest, opts ...grpc.CallOption) (*SetConfigResponse, error)
	GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*Customer, error)
}

type aPIClient struct {
	cc *grpc.ClientConn
}

func NewAPIClient(cc *grpc.ClientConn) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) Report(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*ReportResponse, error) {
	out := new(ReportResponse)
	err := grpc.Invoke(ctx, "/customer.API/Report", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) SetConfig(ctx context.Context, in *SetConfigRequest, opts ...grpc.CallOption) (*SetConfigResponse, error) {
	out := new(SetConfigResponse)
	err := grpc.Invoke(ctx, "/customer.API/SetConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*Customer, error) {
	out := new(Customer)
	err := grpc.Invoke(ctx, "/customer.API/GetConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for API service

type APIServer interface {
	// Return clients metricks for the specified client ID with breakdown by Campaign ID.
	Report(context.Context, *ReportRequest) (*ReportResponse, error)
	SetConfig(context.Context, *SetConfigRequest) (*SetConfigResponse, error)
	GetConfig(context.Context, *GetConfigRequest) (*Customer, error)
}

func RegisterAPIServer(s *grpc.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_Report_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Report(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.API/Report",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Report(ctx, req.(*ReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_SetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).SetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.API/SetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).SetConfig(ctx, req.(*SetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.API/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetConfig(ctx, req.(*GetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: "customer.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Report",
			Handler:    _API_Report_Handler,
		},
		{
			MethodName: "SetConfig",
			Handler:    _API_SetConfig_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _API_GetConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "customer/customer.proto",
}

func init() { proto.RegisterFile("customer/customer.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1504 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x57, 0x5f, 0x6f, 0xdb, 0xc8,
	0x11, 0xb7, 0x48, 0x89, 0x22, 0x47, 0x8e, 0xa1, 0x6c, 0x52, 0x9b, 0xa1, 0x93, 0xc0, 0x55, 0x8b,
	0x46, 0x75, 0x51, 0x05, 0x51, 0xd3, 0xa6, 0xff, 0x12, 0xc0, 0x75, 0x53, 0x57, 0x45, 0x9b, 0x18,
	0xb4, 0x83, 0x3e, 0xf4, 0x41, 0x58, 0x91, 0x6b, 0x6a, 0x61, 0x8a, 0x64, 0x76, 0x97, 0x4a, 0x95,
	0xe7, 0xfb, 0x28, 0x07, 0xdc, 0x77, 0xb9, 0x7b, 0xbd, 0x6f, 0x70, 0x4f, 0xf7, 0x2d, 0x0e, 0xfb,
	0x87, 0xa2, 0x2c, 0x2b, 0xd1, 0xdd, 0xdb, 0xce, 0xcc, 0x6f, 0x66, 0x67, 0x67, 0x7f, 0x33, 0x4b,
	0xc2, 0x41, 0x54, 0x72, 0x91, 0xcf, 0x08, 0x7b, 0x5a, 0x2d, 0x06, 0x05, 0xcb, 0x45, 0x8e, 0xdc,
	0x4a, 0xee, 0x7d, 0x84, 0x3b, 0x21, 0x29, 0x72, 0x26, 0x42, 0xf2, 0xbe, 0x24, 0x5c, 0xa0, 0x43,
	0xf0, 0xa2, 0x94, 0x92, 0x4c, 0x8c, 0x69, 0xec, 0x37, 0x8e, 0x1a, 0x7d, 0x2f, 0x74, 0xb5, 0x62,
	0x14, 0x4b, 0xe3, 0x15, 0xcb, 0x67, 0xe3, 0x18, 0x0b, 0xe2, 0x5b, 0xda, 0x28, 0x15, 0x7f, 0xc7,
	0x82, 0xa0, 0x03, 0x68, 0x8b, 0x5c, 0x9b, 0x6c, 0x65, 0x72, 0x44, 0xae, 0x0c, 0xfb, 0xe0, 0x5c,
	0xe5, 0x6c, 0x86, 0x85, 0xdf, 0xd4, 0x7a, 0x2d, 0xf5, 0x7e, 0x09, 0x7b, 0xd5, 0xde, 0xbc, 0xc8,
	0x33, 0x4e, 0x10, 0x82, 0x66, 0x8c, 0x05, 0x36, 0xfb, 0xaa, 0x75, 0xef, 0x15, 0x74, 0x2f, 0x88,
	0x38, 0xcd, 0xb3, 0x2b, 0x9a, 0x54, 0x49, 0x1e, 0x83, 0xa3, 0x73, 0x52, 0xc8, 0xce, 0x10, 0x0d,
	0x96, 0x07, 0x3c, 0x35, 0x8b, 0xd0, 0x20, 0x7a, 0x4f, 0xe0, 0xee, 0x8a, 0xff, 0x67, 0x36, 0x42,
	0xd0, 0x3d, 0x5b, 0xdb, 0xa8, 0x17, 0xc1, 0x5d, 0xad, 0xf8, 0x27, 0xe5, 0x22, 0x67, 0x8b, 0x91,
	0x20, 0x33, 0xb4, 0x07, 0xd6, 0xb2, 0x36, 0x16, 0x8d, 0x4d, 0xb0, 0xaa, 0x20, 0x6a, 0xad, 0x74,
	0xf4, 0xea, 0xca, 0x54, 0x42, 0xad, 0x65, 0x1d, 0x70, 0x29, 0xa6, 0x39, 0xab, 0xea, 0xa0, 0xa5,
	0xde, 0x57, 0x0d, 0x70, 0xab, 0xb4, 0xd1, 0x6b, 0xe8, 0xe0, 0x78, 0x4e, 0x98, 0xa0, 0x9c, 0x30,
	0xee, 0x37, 0x8e, 0xec, 0x7e, 0x67, 0xf8, 0x8b, 0xdb, 0xe7, 0x1b, 0x9c, 0xd4, 0xa8, 0xd7, 0x99,
	0x60, 0x8b, 0x70, 0xd5, 0x2f, 0xb8, 0x84, 0xee, 0x3a, 0x00, 0x75, 0xc1, 0xbe, 0x26, 0x0b, 0x93,
	0xb8, 0x5c, 0xa2, 0x63, 0x68, 0xcd, 0x71, 0x5a, 0xea, 0xd4, 0x3b, 0xc3, 0xfb, 0xf5, 0x36, 0xb5,
	0x73, 0xa8, 0x21, 0x7f, 0xb6, 0xfe, 0xd8, 0xe8, 0x7d, 0x6d, 0x01, 0xd4, 0x16, 0x79, 0xc8, 0x0c,
	0xcf, 0x48, 0x55, 0x45, 0xb9, 0x46, 0x27, 0xe0, 0x45, 0x78, 0x56, 0x60, 0x9a, 0x64, 0xdc, 0xb7,
	0xd6, 0xb3, 0xaf, 0x9d, 0x07, 0xa7, 0x15, 0x4a, 0x67, 0x5f, 0x7b, 0xa9, 0x10, 0x8c, 0x60, 0x41,
	0xe7, 0x84, 0xfb, 0xf6, 0xe7, 0x42, 0x54, 0xa8, 0x2a, 0x44, 0x25, 0x07, 0xe7, 0xb0, 0x77, 0x33,
	0xfe, 0x86, 0xc3, 0xf7, 0x6f, 0x1e, 0x7e, 0x95, 0x43, 0xc6, 0x75, 0xe5, 0xe8, 0x2a, 0xe2, 0x8d,
	0xed, 0x7e, 0x5a, 0x44, 0xe3, 0xba, 0x5a, 0xcc, 0x6f, 0x9b, 0xe0, 0x56, 0x3b, 0x19, 0x4e, 0x59,
	0x4b, 0x4e, 0xdd, 0x68, 0x43, 0x7b, 0xad, 0x0d, 0x37, 0xd5, 0xfd, 0xe1, 0x6a, 0xd1, 0x9a, 0x47,
	0x76, 0xdf, 0x5b, 0xa9, 0x07, 0x0a, 0xc0, 0x8d, 0xb0, 0x20, 0x49, 0xce, 0x16, 0x7e, 0x4b, 0x19,
	0x97, 0x32, 0x7a, 0x0e, 0xed, 0x82, 0xd1, 0x88, 0x66, 0x89, 0xef, 0xa8, 0xbc, 0x83, 0xdb, 0x95,
	0x18, 0x9c, 0x6b, 0x44, 0x58, 0x41, 0xd1, 0x33, 0x70, 0x26, 0x65, 0x9c, 0x10, 0xe1, 0xb7, 0x95,
	0xd3, 0x83, 0x0d, 0x4e, 0x7f, 0x53, 0x80, 0xd0, 0x00, 0xd1, 0x33, 0xf0, 0x04, 0x66, 0x09, 0x11,
	0x72, 0x2b, 0x57, 0x79, 0xdd, 0xab, 0xbd, 0x2e, 0x2b, 0x53, 0x58, 0xa3, 0x50, 0x1f, 0xba, 0x29,
	0xce, 0x62, 0x9a, 0x25, 0xe3, 0x02, 0x27, 0x64, 0x5c, 0xb2, 0xd4, 0xf7, 0x54, 0xfe, 0x7b, 0x46,
	0x7f, 0x8e, 0x13, 0xf2, 0x8e, 0xa5, 0xe8, 0x0f, 0x70, 0x40, 0x67, 0x05, 0x23, 0x9c, 0xd3, 0x3c,
	0x1b, 0x0b, 0x86, 0xa3, 0x6b, 0xe9, 0x25, 0x1d, 0x40, 0x95, 0xe9, 0x67, 0xb5, 0xf9, 0xd2, 0x58,
	0xa5, 0xdf, 0x23, 0x00, 0x2e, 0x30, 0x13, 0x7a, 0x70, 0x75, 0x14, 0xd4, 0x53, 0x1a, 0x35, 0xbb,
	0x0e, 0xc1, 0xe3, 0x22, 0x2f, 0xb4, 0x75, 0x57, 0xdf, 0x83, 0x54, 0x28, 0x63, 0x00, 0x2e, 0xcd,
	0x70, 0x24, 0x4b, 0xec, 0xdf, 0x39, 0x6a, 0xf4, 0xdd, 0x70, 0x29, 0x07, 0xff, 0x85, 0xb6, 0xa9,
	0x99, 0x2a, 0x7e, 0xc9, 0x18, 0xc9, 0xa2, 0xc5, 0x72, 0xa2, 0x1a, 0x59, 0x92, 0x68, 0x62, 0x2e,
	0xbe, 0x11, 0xca, 0x25, 0x7a, 0x0c, 0x50, 0x67, 0xaa, 0xae, 0xbe, 0x11, 0xae, 0x68, 0x82, 0xc7,
	0xe0, 0xe8, 0xba, 0xa2, 0xfb, 0xd0, 0x8a, 0x31, 0x4d, 0x75, 0xd0, 0x46, 0xa8, 0x85, 0xde, 0x97,
	0x16, 0x38, 0x6f, 0xd4, 0xb5, 0xa3, 0x01, 0x38, 0x98, 0x73, 0x22, 0xaa, 0x31, 0xb2, 0x5f, 0x57,
	0x5b, 0x23, 0x06, 0x27, 0xd2, 0x1c, 0x1a, 0x54, 0xf0, 0x7d, 0x03, 0x5a, 0x4a, 0x83, 0x86, 0xd0,
	0x12, 0x54, 0xa4, 0xc4, 0xcc, 0xd7, 0x87, 0x9b, 0x1d, 0x07, 0x97, 0x12, 0x13, 0x6a, 0xa8, 0xf4,
	0xa1, 0x33, 0x9c, 0x54, 0xec, 0xff, 0x94, 0xcf, 0x48, 0x62, 0x42, 0x0d, 0x0d, 0x0e, 0xa1, 0xa5,
	0x62, 0x48, 0x4a, 0x0b, 0xf2, 0x7f, 0x51, 0x51, 0x5a, 0xae, 0x83, 0xff, 0x41, 0x4b, 0x81, 0x65,
	0x91, 0xe4, 0x3d, 0x9a, 0x4e, 0x2b, 0x59, 0x2a, 0x8f, 0xfe, 0x81, 0xc6, 0x62, 0xaa, 0xf6, 0xb2,
	0x43, 0x2d, 0xc8, 0x01, 0x3b, 0x25, 0x34, 0x99, 0x0a, 0x55, 0x36, 0x3b, 0x34, 0x92, 0x0c, 0x3e,
	0xa3, 0x33, 0x62, 0xc6, 0xae, 0x5a, 0xf7, 0xbe, 0xb3, 0xc1, 0xad, 0xba, 0x72, 0x63, 0x43, 0xad,
	0x77, 0xe4, 0x3d, 0x68, 0xe1, 0xb8, 0xee, 0xc6, 0x26, 0x8e, 0x47, 0xb1, 0x66, 0x00, 0x27, 0x51,
	0xc9, 0x74, 0x74, 0xc5, 0x00, 0x2d, 0xa3, 0x63, 0x68, 0x8a, 0x45, 0x41, 0xfc, 0xd6, 0x51, 0xa3,
	0xbf, 0xb7, 0x5a, 0xfb, 0x6a, 0xdb, 0xcb, 0x45, 0x41, 0x42, 0x85, 0x31, 0xed, 0x1e, 0x5d, 0x2b,
	0xbe, 0x3a, 0xcb, 0x76, 0x8f, 0xae, 0x25, 0x45, 0x7f, 0x03, 0x4d, 0x4e, 0x3f, 0x12, 0xd3, 0x68,
	0x07, 0xb7, 0x03, 0x0d, 0x2e, 0xe8, 0x47, 0x12, 0x2a, 0x10, 0xfa, 0x39, 0xec, 0x4e, 0xc5, 0x2c,
	0x1d, 0x47, 0x79, 0x26, 0xe4, 0x03, 0xe9, 0xaa, 0x60, 0x1d, 0xa9, 0x3b, 0xd5, 0x2a, 0x99, 0x74,
	0x5c, 0x32, 0x2c, 0x24, 0xbf, 0x3c, 0x55, 0xa8, 0xa5, 0x2c, 0x0b, 0x2b, 0xcb, 0xc3, 0x7d, 0x50,
	0x5d, 0xa6, 0x05, 0x39, 0x5c, 0xd4, 0x87, 0x43, 0x94, 0xa7, 0xdc, 0xef, 0x1c, 0xd9, 0x7d, 0x3b,
	0xac, 0x15, 0xe8, 0x01, 0xb8, 0x73, 0xcc, 0x85, 0xca, 0x5d, 0xb7, 0x48, 0x5b, 0xca, 0x32, 0xf5,
	0x3e, 0x38, 0x19, 0x5e, 0xf6, 0x47, 0x67, 0xd8, 0x5d, 0x27, 0x45, 0x68, 0xec, 0x92, 0xf6, 0x58,
	0x08, 0x46, 0x27, 0xa5, 0x20, 0xdc, 0xdf, 0x53, 0x7b, 0xac, 0x68, 0x82, 0xe7, 0xd0, 0x94, 0xa7,
	0xac, 0x6f, 0xbe, 0xb1, 0xf9, 0xe6, 0xad, 0xd5, 0x9b, 0xef, 0x7d, 0xe1, 0x82, 0xb7, 0x1c, 0x2c,
	0xe8, 0xd7, 0x60, 0x27, 0x24, 0x37, 0x9c, 0x3e, 0xd8, 0x30, 0x7a, 0x06, 0x67, 0x24, 0x0f, 0x25,
	0x06, 0xfd, 0x0a, 0xac, 0xbc, 0x7a, 0xbf, 0xf6, 0x37, 0x21, 0xdf, 0x5e, 0x84, 0x56, 0xae, 0x2a,
	0x73, 0xc5, 0xe4, 0xc7, 0x82, 0x6c, 0x6e, 0xcd, 0xba, 0x5a, 0x81, 0xfe, 0x0a, 0x50, 0x72, 0xc2,
	0xc6, 0x38, 0x91, 0x57, 0xd1, 0x54, 0xfb, 0x3e, 0xda, 0x14, 0xed, 0x1d, 0x27, 0xec, 0x44, 0x82,
	0x42, 0xaf, 0xac, 0x96, 0xe8, 0x05, 0xb4, 0x23, 0xcc, 0x18, 0x25, 0x4c, 0x71, 0xe8, 0x13, 0xae,
	0xff, 0xa6, 0x5c, 0xfc, 0x07, 0x8b, 0x68, 0x1a, 0x56, 0x68, 0xf4, 0x14, 0xec, 0x08, 0x0b, 0x33,
	0xcd, 0xb7, 0x38, 0x49, 0x24, 0x7a, 0x05, 0x9d, 0x98, 0xcc, 0x69, 0x44, 0xc6, 0x8a, 0xb1, 0xed,
	0x1f, 0xe3, 0x08, 0xda, 0x43, 0x92, 0x18, 0xfd, 0x1e, 0x9c, 0x38, 0x9f, 0x61, 0x9a, 0x99, 0xb1,
	0xbe, 0xc5, 0xd5, 0x80, 0xd1, 0x5f, 0xc0, 0x2b, 0xca, 0x49, 0x4a, 0xf9, 0x94, 0x30, 0xc5, 0xc4,
	0xad, 0x9e, 0x35, 0x5e, 0x1e, 0x92, 0xf3, 0x42, 0x0d, 0xf7, 0xed, 0x87, 0xe4, 0xbc, 0x40, 0x43,
	0x70, 0x92, 0x3c, 0x4f, 0x52, 0x3d, 0xe5, 0x6f, 0x3c, 0x73, 0x2b, 0x04, 0x50, 0x88, 0xd0, 0x20,
	0xe5, 0x15, 0x64, 0x44, 0x7c, 0xc8, 0xd9, 0xb5, 0x62, 0xf6, 0xf6, 0x2b, 0x30, 0x68, 0xf4, 0x5b,
	0xb0, 0x68, 0x61, 0x48, 0xbf, 0xc5, 0xc7, 0xa2, 0x85, 0x6c, 0x21, 0x86, 0xb3, 0x84, 0x8c, 0x69,
	0xa1, 0xb8, 0xef, 0x85, 0x6d, 0x25, 0x8f, 0x8a, 0xe0, 0x09, 0x38, 0x3a, 0x29, 0xf9, 0x54, 0x4d,
	0x68, 0x9a, 0xca, 0x67, 0x6d, 0xf9, 0xfd, 0xe9, 0x19, 0xcd, 0x28, 0x0e, 0xde, 0x83, 0x7d, 0x46,
	0x72, 0xc5, 0x9a, 0xbc, 0x94, 0x5f, 0x28, 0x86, 0xe8, 0x5b, 0x59, 0xa3, 0xd1, 0xe8, 0x19, 0x34,
	0x23, 0x2a, 0x16, 0x66, 0x7c, 0x6f, 0xf1, 0x52, 0xd0, 0x60, 0x08, 0xd6, 0xdb, 0x8b, 0x8d, 0xd3,
	0xd3, 0x87, 0xf6, 0x9c, 0x30, 0xf5, 0x84, 0x59, 0x66, 0x24, 0x68, 0x31, 0x78, 0x01, 0xde, 0x92,
	0xed, 0x1b, 0x5d, 0xf7, 0xc1, 0x99, 0xe5, 0x13, 0x9a, 0xea, 0x87, 0xc4, 0x0d, 0x8d, 0x14, 0xfc,
	0x09, 0xbc, 0xe5, 0xfe, 0x32, 0x3e, 0xcd, 0xa2, 0xb4, 0x8c, 0xb5, 0xaf, 0x1b, 0x56, 0xa2, 0x0c,
	0x99, 0x52, 0x2e, 0x54, 0xef, 0x7a, 0xa1, 0x5a, 0x1f, 0x8f, 0x60, 0x77, 0x75, 0xe8, 0xa2, 0x7d,
	0x40, 0x62, 0x4a, 0x59, 0x3c, 0x2e, 0x30, 0x13, 0x8b, 0xf1, 0x04, 0x67, 0x19, 0x61, 0xdd, 0x1d,
	0xe4, 0x41, 0x6b, 0x4e, 0x63, 0x92, 0x77, 0x1b, 0x08, 0xaa, 0xc9, 0xd5, 0xb5, 0xe4, 0xda, 0x40,
	0xec, 0xe3, 0x7f, 0x41, 0xfb, 0x8d, 0xb9, 0xe3, 0x3b, 0xe0, 0x4d, 0x68, 0xcc, 0x3f, 0x50, 0x11,
	0x4d, 0xbb, 0x3b, 0x12, 0xa5, 0x59, 0xd3, 0x6d, 0x20, 0x57, 0xbe, 0x38, 0x8c, 0x77, 0x2d, 0xb4,
	0x0b, 0x2e, 0x8e, 0xe7, 0x33, 0x7c, 0x2d, 0xbd, 0xa5, 0xc4, 0x67, 0x98, 0x09, 0x26, 0x26, 0xdd,
	0xe6, 0xf0, 0x9b, 0x06, 0xd8, 0x27, 0xe7, 0x23, 0xf4, 0x12, 0x1c, 0xfd, 0x23, 0x84, 0x56, 0x86,
	0xd2, 0x8d, 0xdf, 0xb2, 0xc0, 0xbf, 0x6d, 0xd0, 0xbf, 0x32, 0xbd, 0x1d, 0xf4, 0x0f, 0xf0, 0x96,
	0x7f, 0x38, 0x68, 0x85, 0xd5, 0xeb, 0xbf, 0x4d, 0xc1, 0xe1, 0x46, 0xdb, 0x32, 0xce, 0x4b, 0xf0,
	0xce, 0x36, 0xc5, 0x59, 0xff, 0x2b, 0x0a, 0x36, 0xfc, 0x6e, 0xf5, 0x76, 0x26, 0x8e, 0x7a, 0x11,
	0x7e, 0xf7, 0x43, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa0, 0x41, 0xb9, 0x5b, 0x76, 0x0e, 0x00, 0x00,
}
